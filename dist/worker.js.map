{
  "version": 3,
  "sources": ["../src/worker.js"],
  "sourceRoot": "dist",
  "sourcesContent": ["export default {\n    async fetch(request, env, ctx) {\n        const url = new URL(request.url);\n        \n        // If it's the main page, show the interface\n        if (url.pathname === '/') {\n            return new Response(getRendererInterface(), {\n                headers: { \"content-type\": \"text/html;charset=UTF-8\" }\n            });\n        }\n        \n        // If it's a fetch request, proxy the website\n        if (url.pathname.startsWith('/fetch/')) {\n            const targetUrl = decodeURIComponent(url.pathname.replace('/fetch/', ''));\n            return await fetchAndRenderWebsite(targetUrl);\n        }\n        \n        return new Response('Not found', { status: 404 });\n    },\n};\n\nfunction getRendererInterface() {\n    return `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>HTML Renderer - Cloudflare Worker</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            margin: 0;\n            padding: 20px;\n            min-height: 100vh;\n            color: white;\n        }\n        .container {\n            max-width: 800px;\n            margin: 0 auto;\n            background: rgba(255,255,255,0.1);\n            padding: 30px;\n            border-radius: 15px;\n            backdrop-filter: blur(10px);\n            box-shadow: 0 8px 32px rgba(0,0,0,0.1);\n        }\n        h1 {\n            text-align: center;\n            margin-bottom: 30px;\n            font-size: 2.5em;\n        }\n        .input-group {\n            margin-bottom: 20px;\n        }\n        label {\n            display: block;\n            margin-bottom: 10px;\n            font-weight: bold;\n        }\n        input[type=\"url\"] {\n            width: 100%;\n            padding: 15px;\n            border: none;\n            border-radius: 8px;\n            font-size: 16px;\n            background: rgba(255,255,255,0.9);\n            color: #333;\n        }\n        .btn {\n            background: linear-gradient(45deg, #f093fb 0%, #f5576c 100%);\n            color: white;\n            border: none;\n            padding: 15px 30px;\n            border-radius: 8px;\n            cursor: pointer;\n            font-size: 16px;\n            font-weight: bold;\n            transition: transform 0.2s;\n            width: 100%;\n        }\n        .btn:hover {\n            transform: translateY(-2px);\n        }\n        .feature {\n            background: rgba(255,255,255,0.1);\n            padding: 15px;\n            margin: 10px 0;\n            border-radius: 8px;\n            border-left: 4px solid #f5576c;\n        }\n        .timestamp {\n            text-align: center;\n            margin-top: 20px;\n            opacity: 0.8;\n            font-size: 0.9em;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>\uD83C\uDF10 HTML Renderer Worker</h1>\n        <p style=\"text-align: center; font-size: 1.2em; margin-bottom: 30px;\">\n            Fetch and proxy any website through Cloudflare's edge network\n        </p>\n        \n        <form onsubmit=\"fetchWebsite(event)\">\n            <div class=\"input-group\">\n                <label for=\"website-url\">Enter Website URL:</label>\n                <input \n                    type=\"url\" \n                    id=\"website-url\" \n                    placeholder=\"https://example.com\" \n                    required\n                >\n            </div>\n            <button type=\"submit\" class=\"btn\">\uD83D\uDE80 Fetch & Render Website</button>\n        </form>\n        \n        <div class=\"feature\">\n            \u2705 <strong>Global CDN:</strong> Fetch websites through Cloudflare's edge network\n        </div>\n        <div class=\"feature\">\n            \u2705 <strong>CORS Bypass:</strong> Access websites that block cross-origin requests\n        </div>\n        <div class=\"feature\">\n            \u2705 <strong>Fast & Reliable:</strong> Powered by Cloudflare Workers\n        </div>\n        <div class=\"feature\">\n            \u2705 <strong>No Installation:</strong> Works directly in your browser\n        </div>\n        \n        <div class=\"timestamp\">\n            Deployed by: abdollahelkadi | ${new Date().toISOString()}\n        </div>\n    </div>\n\n    <script>\n        function fetchWebsite(event) {\n            event.preventDefault();\n            const url = document.getElementById('website-url').value;\n            \n            if (url) {\n                // Redirect to the fetch endpoint\n                window.location.href = '/fetch/' + encodeURIComponent(url);\n            }\n        }\n    </script>\n</body>\n</html>\n    `;\n}\n\nasync function fetchAndRenderWebsite(targetUrl) {\n    try {\n        // Add protocol if missing\n        if (!targetUrl.startsWith('http://') && !targetUrl.startsWith('https://')) {\n            targetUrl = 'https://' + targetUrl;\n        }\n        \n        // Fetch the website\n        const response = await fetch(targetUrl, {\n            headers: {\n                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n            }\n        });\n        \n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        \n        let html = await response.text();\n        \n        // Fix relative URLs to absolute URLs\n        html = fixRelativeUrls(html, targetUrl);\n        \n        // Add a header to show it's proxied\n        const proxyHeader = `\n        <div style=\"\n            position: fixed; \n            top: 0; \n            left: 0; \n            right: 0; \n            background: linear-gradient(90deg, #667eea, #764ba2); \n            color: white; \n            padding: 10px; \n            text-align: center; \n            font-family: Arial, sans-serif; \n            z-index: 10000;\n            font-size: 14px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        \">\n            \uD83C\uDF10 Proxied through Cloudflare Worker | Original: <strong>${targetUrl}</strong> | \n            <a href=\"/\" style=\"color: #FFD700; text-decoration: none;\">\u2190 Back to Renderer</a>\n        </div>\n        <div style=\"height: 50px;\"></div>\n        `;\n        \n        // Insert the header after <body> tag\n        html = html.replace(/<body[^>]*>/i, match => match + proxyHeader);\n        \n        return new Response(html, {\n            headers: {\n                'content-type': 'text/html;charset=UTF-8',\n                'cache-control': 'no-cache',\n                'x-proxied-by': 'cloudflare-worker',\n                'x-original-url': targetUrl\n            }\n        });\n        \n    } catch (error) {\n        return new Response(getErrorPage(targetUrl, error.message), {\n            headers: { 'content-type': 'text/html;charset=UTF-8' },\n            status: 500\n        });\n    }\n}\n\nfunction fixRelativeUrls(html, baseUrl) {\n    const base = new URL(baseUrl);\n    const baseHref = `${base.protocol}//${base.host}`;\n    \n    // Fix relative URLs in various attributes\n    html = html.replace(/src=['\"]((?!https?:\\/\\/|\\/\\/|data:)[^'\"]+)['\"]/gi, \n        (match, url) => `src=\"${new URL(url, baseUrl).toString()}\"`);\n    \n    html = html.replace(/href=['\"]((?!https?:\\/\\/|\\/\\/|mailto:|tel:|#)[^'\"]+)['\"]/gi, \n        (match, url) => `href=\"${new URL(url, baseUrl).toString()}\"`);\n    \n    html = html.replace(/action=['\"]((?!https?:\\/\\/|\\/\\/)[^'\"]+)['\"]/gi, \n        (match, url) => `action=\"${new URL(url, baseUrl).toString()}\"`);\n    \n    return html;\n}\n\nfunction getErrorPage(url, error) {\n    return `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Fetch Error</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background: linear-gradient(135deg, #ff6b6b, #ffa500);\n            color: white;\n            padding: 20px;\n            text-align: center;\n            min-height: 100vh;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n        .error-container {\n            background: rgba(255,255,255,0.1);\n            padding: 40px;\n            border-radius: 15px;\n            backdrop-filter: blur(10px);\n            max-width: 600px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"error-container\">\n        <h1>\u274C Failed to Fetch Website</h1>\n        <p><strong>URL:</strong> ${url}</p>\n        <p><strong>Error:</strong> ${error}</p>\n        <p>This could be due to:</p>\n        <ul style=\"text-align: left;\">\n            <li>Website blocking requests</li>\n            <li>CORS restrictions</li>\n            <li>Server is down</li>\n            <li>Invalid URL</li>\n        </ul>\n        <a href=\"/\" style=\"color: #FFD700; text-decoration: none; font-weight: bold;\">\n            \u2190 Try Another Website\n        </a>\n    </div>\n</body>\n</html>\n    `;\n}\n"],
  "mappings": "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",
  "names": []
}
